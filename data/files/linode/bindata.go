// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x9a\xcf\x6f\xa3\xb8\x17\xc0\xef\xf9\x2b\x2c\x9f\x9b\x7c\xb1\x31\x0e\xf4\xf8\xd5\xce\xae\x56\xbb\xea\x5c\x7a\x5b\x8d\x2a\x17\xdc\x86\x09\xb1\x19\x1b\x52\x55\xa3\xfe\xef\x2b\xc8\x0f\x48\xf2\x70\x4c\xb6\x1c\xe6\x52\x55\x36\x3c\xbf\xe7\x8f\xdf\x2f\x93\x9f\x33\x84\xb0\x12\x1b\x89\xef\x11\x2e\x72\xa5\x33\x89\xef\x9a\x31\xa9\xb6\x16\xdf\xa3\x7f\x66\x08\x21\x84\x33\xb9\x6d\x87\x11\xc2\x3f\xc4\xe1\xbf\xd2\xe8\x0c\xcf\x10\xfa\xd6\xbe\x60\xe4\x6b\xae\x55\xf7\xce\xcf\xf6\xef\x71\xa2\x91\x5f\xdb\x79\x2a\x55\x65\x44\x81\x0f\x93\xa9\xae\x55\x65\xde\x77\xb3\x7b\xc1\x08\xe1\x3c\x83\x9e\xff\xb8\x73\x48\x7e\x93\xb6\xf2\x16\xdb\x3d\xec\x94\x69\x75\x5d\xad\xa4\x18\x21\xf8\xec\x0d\xa7\xf4\x51\x82\x7d\x64\xca\x7a\x78\x17\xd6\xe7\x32\x4f\x1e\x1e\x96\x29\xca\x9d\x4d\x90\x50\xfb\x7a\x2e\xf4\xf4\x69\xa7\xa6\x8e\x93\xb0\x3f\x83\xa7\xca\x7a\x9e\x04\x51\xce\x95\x36\xc3\xd4\xbe\x97\x80\xce\x67\x6f\xf8\x49\x9f\x13\x31\x7e\x81\xe3\x4b\x1f\x47\xc7\xc9\x95\xad\x84\x4a\xe5\xe3\x7b\x29\x01\xf7\xb1\xeb\xba\x11\xf2\xca\xe7\x4a\x34\xee\x39\x27\x9d\x7c\x91\x65\x3b\x97\x3b\x3c\x8d\x10\x7e\x16\xe9\xba\x2e\x4f\x07\x5b\x67\xcd\x53\x79\x36\x88\x10\x5e\xe9\xda\x14\x8d\xde\xc1\x22\x08\xc2\xbb\xd3\xc9\x8d\x56\xd5\xaa\x9d\xa5\xbd\x89\x8f\xd9\xf9\x7f\x1f\x47\x85\x2a\x23\x94\x7d\x91\x06\xdf\x23\x12\x04\xc1\xd9\x46\x80\x36\x5c\x2a\x76\xaa\xd4\x32\xea\xb4\xea\x69\x14\x5d\xac\xbd\x91\x1b\xdd\x22\x20\x01\x65\xc7\x51\x5b\xa7\xa9\xb4\x56\x37\x2a\xa9\xba\x28\x8e\x13\x59\x6e\xd7\x8d\x65\x11\xef\xe9\x59\x88\x67\x59\x34\xaa\x3e\xb4\x7a\x22\xf2\xc7\xff\x3b\x4d\xb7\x69\x59\x37\xfb\x4a\x8e\x23\x69\x21\x6c\x33\x82\x77\x66\x75\x8f\x2a\x59\xbd\x69\xb3\x7e\xd2\x75\xb5\xdf\x0a\xf0\x60\x75\x6c\x9b\x23\x90\x09\x93\x4d\x48\x97\x0d\xd3\x5d\x44\xe3\xf9\x52\x90\x2f\x64\xc7\x15\xc2\x04\x06\x4c\x82\x61\xc2\x34\x60\xb1\x37\xe1\x88\x50\x88\xf0\xdf\x6d\xb2\x43\xd4\x93\xf0\xc1\xb0\x21\xc6\x74\x04\x63\x3a\x19\xe3\x78\x90\xf1\x0d\x84\x99\x9b\x30\xf5\x26\x1c\x82\x80\xa9\x03\x30\x0b\x12\xee\x0d\x38\x26\x09\x1d\x06\xcc\x20\xc0\x74\x3c\x60\x36\x02\x30\x9b\x0a\x70\xdf\x57\xd0\x80\xbf\x8c\x20\x1c\xb9\x09\x33\x6f\xc2\x1c\x24\xcc\x1c\x84\x1b\x68\xde\x84\x09\x0f\x63\x36\x8c\x38\x86\x10\xb3\xf1\x88\xa3\x11\x88\xf9\x54\x88\x1d\x49\xf8\x06\xc2\xb1\x9b\x30\xf7\x25\x4c\x28\x48\x38\x76\x10\x6e\xa1\x79\x23\x0e\xe9\x92\xc7\xc3\x88\x09\x87\x18\xf3\xf1\x8c\xf9\x08\xc6\xf1\x54\x8c\xf9\x20\x63\x76\x03\x63\xc2\xdd\x90\x63\x5f\xc8\x94\xc1\x99\x98\x3b\x28\xb7\xdc\xbc\x29\xf3\x28\x0a\xf9\x30\xe5\x10\xcc\xc6\xf1\x78\xca\xcb\x31\x15\xd7\x54\xae\xdc\xf7\x19\x34\xe0\x37\x23\x30\x37\x15\x86\xb3\xe2\xf2\x76\x66\x16\x83\x9c\x43\x57\x46\x6e\xc9\xf9\x07\xec\x90\x04\x4b\x47\x52\xe6\x60\x56\x26\x37\xf8\x73\x32\xa6\xee\x0a\xa6\x22\x3d\x5c\x77\x91\x5b\xa2\xf6\x35\xd4\x7d\x43\xdc\xa8\x97\x70\xdc\x66\xae\xc0\x9d\xc4\x61\xe0\x1f\xb8\x49\xc2\x79\xe0\x88\xdc\x09\x18\xb9\x7b\x67\xc3\x1b\x75\xd3\x46\xf9\xb3\x9e\xaa\x06\xa3\xc3\x7d\x54\x17\x28\x3f\x93\xb5\x77\x15\x96\xc0\x55\x18\x77\x95\x61\x3b\x47\xf5\xef\x96\x39\x25\xcc\x51\x89\x11\x0a\xd6\x62\xf4\x86\x62\x8c\x8c\xe9\x9a\xc3\xa9\x5a\xaa\x70\x38\x55\xd3\x5b\x72\xf5\x35\xda\xa1\x67\x57\x45\x16\x0c\x4e\xd6\x89\x2b\x59\xef\x7c\xd5\xbf\x26\x4b\x42\x4a\x1c\xe9\x9a\x24\x60\xbe\x0e\x6f\xe8\xae\x88\x47\xff\xbc\xca\x5f\x57\x1b\xb9\x99\xf0\x8a\x64\x39\xdc\x5e\xdd\xd0\x3f\xc3\xdd\x15\x60\xc5\x95\xe6\x2a\x81\xdd\xda\x75\x3f\xc2\xa2\xa5\x7f\xb2\xa6\x01\x73\xc4\x6f\x0a\xa7\xea\x4b\xc4\x7b\xc3\xfe\x43\x73\x75\xd8\x9a\xc9\xee\x47\x3e\xb9\x7d\x86\xeb\x6e\xc0\x8a\x2b\xbd\x15\x5c\x8e\x11\xe7\x05\x49\x42\x22\xff\xb0\xcd\x82\xc4\xe1\xc6\x0c\x8e\xd9\xa3\x09\x7b\xb4\x56\x87\xbd\x99\xec\x82\xe4\x73\xbb\xe7\xa5\x13\xb0\x77\x62\x0e\xe1\xc4\x4c\x5d\x89\x39\x39\x89\xbc\xd7\x00\x27\xce\x38\x9d\x04\x9e\x17\x24\x57\x00\x7b\x74\x55\x87\xbd\xf9\x45\x5a\x67\xf8\x7a\x04\x30\xe2\xf3\xab\x6c\xd2\x74\xc2\xfe\x84\xdb\x20\xed\x48\xc5\x11\xc8\x18\x68\x9d\xaf\x30\x8e\x47\xe4\xe1\x5f\xa4\x71\x4e\xdc\x79\xd8\xb3\x6d\xbe\xad\xe2\x0a\x9b\x36\xd8\x9f\x72\xc8\x62\x97\x23\x87\x01\x48\x19\xea\x9b\xaf\x60\xee\xda\xe6\xd9\xf1\x43\x64\x6a\x64\x26\x55\x95\x8b\x02\xf8\x0c\x59\x1a\xbd\xcd\xb3\x76\x3f\xf7\xda\xe0\xbe\xf2\x65\x21\xde\x7f\xd7\x66\x23\x1a\xe1\xf8\x25\x97\x45\xaf\xd4\x13\x4a\xe9\x4a\x54\xf9\xc5\x09\x29\x57\xc2\x6c\xa4\x59\x88\xb2\xb4\xa9\xce\xe4\x22\xd5\x9b\xff\xa5\x45\x6d\x2b\x69\xe6\x9d\x3a\x8d\x48\x7c\x77\xe5\xb5\x4c\xd9\xf3\x57\x2e\xb0\xb4\x7a\x75\xc6\xf5\x0d\x6c\xe7\xa5\xda\xa6\x5a\xbd\xe4\xaf\xad\x95\x7f\x3e\x7c\xfd\xed\xcb\xd3\xe3\xd7\xbf\xbe\x3c\xe0\xfe\x81\xc4\x2f\xda\x6c\xba\xdf\x4b\x3c\x55\x7a\x2d\xd5\xe9\x13\xdf\xed\xee\x7b\x31\x30\x75\x64\xfa\x78\x39\x97\xab\xb2\xa5\x83\x4b\x61\xed\x9b\x36\x19\xbe\x38\xe1\xdf\x66\xe8\xe4\xeb\xf1\xba\x7e\x96\x46\xc9\x0a\xfa\x74\xbc\x95\xc6\xee\x3f\x5c\x93\x45\xbc\xe8\x5d\x1a\xec\x7f\xdd\xd1\x43\x91\xc9\x2d\xbe\x47\x95\xa9\x65\x7f\xa3\x8d\xce\x2e\x47\x7f\x88\xfd\xd8\xac\xaf\xda\x79\xbc\x38\x59\x3c\xf1\x59\xfc\x45\x14\x16\x58\xfd\x7c\xb8\x5d\xbe\x1d\x3c\x5d\xbf\xd9\x92\xd9\xc7\xec\xdf\x00\x00\x00\xff\xff\x8a\xbf\xa9\xa3\xd2\x22\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8914, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
